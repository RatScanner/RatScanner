@page "/app/settings/scanning"
@inject Interfaces.ISettingsUI SettingsUI
@inject Interfaces.IHotkeySelector HotkeySelector
@inject IJSRuntime JsRuntime
@implements IDisposable
@using System.Linq

<div>
    <MudGrid Class="pa-0 ma-0" Spacing="0" Style="height: 100%;">
        <MudItem xs="12">
            <div class="d-flex align-center justify-center mx-2 mb-1">
                <MudText Typo="Typo.subtitle1" Color="Color.Inherit">Scanning Settings</MudText>
            </div>
        </MudItem>
        <MudItem xs="12">
            <MudPaper Class="align-center justify-center pa-2 mx-2 mb-2" Elevation="2">
                <MudGrid Spacing="0" Class="pa-0 ma-0">
                        <MudSelect @bind-Value="@SettingsUI.NameScanLanguage" T="int" Label="Name Scan Language" AnchorOrigin="Origin.BottomCenter" Variant="Variant.Text" Margin="Margin.Dense" Dense="true" Class="mx-1">
                            @foreach (var language in GetLanguages())
                            {
                                <MudSelectItem T="int" Value="@language.ordinal">
                                    @language.name
                                </MudSelectItem>
                            }
                        </MudSelect>
                        <MudCheckBox @bind-Checked="@SettingsUI.EnableNameScan" Label="Enable Name Scan" Dense="true" Size="Size.Small" Class="pa-0 ma-0"></MudCheckBox>
                    <MudCheckBox @bind-Checked="@SettingsUI.EnableAutoNameScan" Label="Automatic Scanning" Dense="true" Size="Size.Small" Class="pa-0 ma-0"></MudCheckBox>
                </MudGrid>
            </MudPaper>
        </MudItem>
        <MudItem xs="12">
            <MudPaper Class="align-center justify-center pa-2 mx-2 mb-2" Elevation="2">
                <MudStack Spacing="0" Class="pa-0 ma-0">
                    <MudCheckBox @bind-Checked="@SettingsUI.EnableIconScan" Label="Enable Icon Scan" Dense="true" Size="Size.Small" Class="pa-0 ma-0"></MudCheckBox>
                    <MudCheckBox @bind-Checked="@SettingsUI.ScanRotatedIcons" Label="Scan Rotated Icons" Dense="true" Size="Size.Small" Class="pa-0 ma-0"></MudCheckBox>
                    <MudCheckBox @bind-Checked="@SettingsUI.UseCachedIcons" Label="Use Cached Icons" Dense="true" Size="Size.Small" Class="pa-0 ma-0"></MudCheckBox>
                </MudStack>
            </MudPaper>
        </MudItem>
        <MudItem xs="12">
            <MudPaper Class="align-center justify-center pa-2 mx-2 mb-2" Elevation="2">
                <MudGrid Spacing="0" Class="pa-0 ma-0">
                    <MudItem xs="12" Class="pa-0 ma-0 ">
                        <div class="d-flex justify-center">
                            <MudText>
                                Icon Scan Hotkey
                            </MudText>
                        </div>
                        <div class="d-flex justify-center">
                            <MudButton Size="Size.Small" Variant="Variant.Filled" Dense="true" DisableElevation="true" Color="@(HotkeySelector.Listening == true ? Color.Info : Color.Primary)" @onclick="HotkeyClickEventHandler">
                                @if (HotkeySelector.Listening)
                                {
                                    <MudProgressCircular Class="ms-n1 mr-1" Size="Size.Small" Indeterminate="true" />
                                    @HotkeySelector.HotkeyInterface.HotkeyString
                                }
                                else
                                {
                                    @HotkeySelector.HotkeyInterface.HotkeyString
                                }
                            </MudButton>
                        </div>
                    </MudItem>
                </MudGrid>
            </MudPaper>
        </MudItem>
    </MudGrid>
</div>

@code {

    private (string name, int ordinal)[] GetLanguages()
    {
        // Sort all elements of the enum RatStash.Language
        var values = Enum.GetValues(typeof(RatStash.Language)).Cast<RatStash.Language>();
        var languages = values.Select(language => (name: language.ToString(), ordinal: (int)language));
        return languages.OrderBy(language => language.name).ToArray();
    }

    protected override void OnInitialized()
    {
        SettingsUI.PropertyChanged += PropertyChangeHandler;
        HotkeySelector.PropertyChanged += PropertyChangeHandler;
        HotkeySelector.HotkeyInterface.PropertyChanged += PropertyChangeHandler;
    }

    private async void PropertyChangeHandler(object sender, EventArgs e)
    {
        await InvokeAsync(() => StateHasChanged());
    }

    public void Dispose()
    {
        SettingsUI.PropertyChanged -= PropertyChangeHandler;
        HotkeySelector.PropertyChanged -= PropertyChangeHandler;
        HotkeySelector.HotkeyInterface.PropertyChanged -= PropertyChangeHandler;
    }

    public async Task LogAsync(string message)
    {
        await JsRuntime.InvokeVoidAsync("console.log", message);
    }

    bool _registerHotkey = false;

    private void HotkeyClickEventHandler(MouseEventArgs args)
    {
        if (!HotkeySelector.Listening)
        {
            //KeyboardKeys.Clear();
            //MouseButtons.Clear();
            HotkeySelector.StartListening();
        }
        else
        {
            HotkeySelector.StopListening();
            SettingsUI.IconScanHotkey = HotkeySelector.HotkeyInterface;
            //MouseButtons.Add(args.Button.ToString());
        }
    }

}

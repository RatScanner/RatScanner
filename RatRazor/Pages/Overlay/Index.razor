@page "/overlay"
@using RatLib.Scan
@inject RatRazor.Interfaces.IRatScannerUI RatScannerUI
@inject RatTracking.TarkovTrackerDB TarkovTrackerDB
@inject RatLib.VirtualScreenOffset VirtualScreenOffset
@inject IJSRuntime JSRuntime;
@implements IDisposable

@if (RatScannerUI.CurrentItemScan != null && RatScannerUI.CurrentItemScan.GetToolTipPosition() != null && RatScannerUI.CurrentItemScan.DissapearAt > DateTimeOffset.Now.ToUnixTimeMilliseconds())
{
    @if (RatScannerUI.CurrentItemScan is ItemIconScan iconScan)
    {
        <div style="font-size:smaller;position:absolute;left:@(RatScannerUI.CurrentItemScan.GetToolTipPosition().X - VirtualScreenOffset.XOffset)px;top:@(RatScannerUI.CurrentItemScan.GetToolTipPosition().Y - VirtualScreenOffset.YOffset)px;width:@(iconScan.Icon.Size.X)px;height:@(iconScan.Icon.Size.Y)px;">
            <div style="height:100%;width:100%;position:relative;text-shadow: 0px 0px 5px black;" class="pa-1">
                <div style="position:absolute;left:0px;top:0px;">
                    <div style="position:relative;">
                        @{
                            var iconStyle = "transform-origin: top left;";
                            if (iconScan.Rotated)
                            {
                                iconStyle += $"width:{iconScan.Icon.Size.Y}px; height:{iconScan.Icon.Size.X}px;";
                                iconStyle += "transform: rotate(0.25turn) translate(0%, -100%);";
                            }
                            else
                            {
                                iconStyle += $"width:{iconScan.Icon.Size.X}px; height:{iconScan.Icon.Size.Y}px;";
                            }
                        }
                        <img src="@GetIconURL()" style="position: absolute; left: 0px; top: 0px; z-index: -1; background-color: #121212; outline-offset: -1px; outline: 1px solid #555555; @iconStyle">
                    </div>
                </div>
                <div class="stroke">
                </div>
                        @RatScannerUI.IntToShortPrice(RatScannerUI.Avg24hPrice)
                @if (RatScannerUI.TrackingNeeds.QuestRemaining > 0)
                {
                    <div class="d-flex align-center stroke">
                        @RatScannerUI.TrackingNeeds.QuestRemaining <MudIcon Icon="@Icons.Filled.Checklist" Size="Size.Small" Class="ml-1" />
                    </div>
                }
                @if (RatScannerUI.TrackingNeeds.HideoutRemaining > 0)
                {
                    <div class="d-flex align-center stroke">
                        @RatScannerUI.TrackingNeeds.HideoutRemaining <MudIcon Icon="@Icons.Filled.House" Size="Size.Small" Class="ml-1" />
                    </div>
                }
            </div>
        </div>
    }
    else
    {
        <div class="d-flex align-center" style="position:absolute;left:@(RatScannerUI.CurrentItemScan.GetToolTipPosition().X - VirtualScreenOffset.XOffset)px;top:@(RatScannerUI.CurrentItemScan.GetToolTipPosition().Y - VirtualScreenOffset.YOffset)px;background:#121212;padding:4px;">
            <span class="stroke">
                @RatScannerUI.IntToShortPrice(RatScannerUI.Avg24hPrice)
            </span>

            @if (RatScannerUI.TrackingNeeds.QuestRemaining > 0)
            {
                <MudIcon Icon="@Icons.Filled.Checklist" Size="Size.Small" Class="ml-1" />
            }
            @if (RatScannerUI.TrackingNeeds.HideoutRemaining > 0)
            {
                <MudIcon Icon="@Icons.Filled.House" Size="Size.Small" Class="ml-1" />
            }
        </div>
    }
}

@code {
    private string GetIconURL()
    {
        var path = RatScannerUI.CurrentItemScan.IconPath;

        if (string.IsNullOrEmpty(path))
        {
            return $"https://assets.tarkov-tools.com/{RatScannerUI.CurrentItemScan.MatchedItem.Id}-base-image.png";
        }

        path = path.Replace("\\", "/");
        var pathEnd = path[path.IndexOf("Data/icons/")..path.Length];
        pathEnd = pathEnd[5..pathEnd.Length];
        var url = "https://local.data/" + pathEnd;
        return url;
    }

    protected override void OnInitialized()
    {
        RatScannerUI.PropertyChanged += PropertyChangeHandler;
    }

    private async void PropertyChangeHandler(object sender, EventArgs e)
    {
        await InvokeAsync(() => StateHasChanged());
    }

    public void Dispose() => RatScannerUI.PropertyChanged -= PropertyChangeHandler;
}

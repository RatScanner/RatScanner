@page "/settings"
@inject RatRazor.Interfaces.ISettingsUI SettingsUI
@inject IJSRuntime JSRuntime;
@implements IDisposable

<MudGrid Class="pa-0" Spacing="0">
    <MudItem xs="12">
        <div class="d-flex align-center justify-center mx-2 mb-1">
            <MudText Typo="Typo.subtitle1" Color="Color.Inherit">General Settings</MudText>
        </div>
    </MudItem>
    <MudItem xs="12">
        <MudPaper Class="align-center justify-center pa-2 mx-2 mb-1" Elevation="2">
            <MudSlider @bind-Value="SettingsUI.ToolTipMilli" Min="0" Max="10000" Step="100" Color="Color.Info">
                <MudText Typo="Typo.subtitle2">Tooltip Duration: @SettingsUI.ToolTipMilli.ToString()</MudText>
            </MudSlider>
        </MudPaper>
    </MudItem>
    <MudItem xs="12">
        <MudPaper Class="d-flex align-center justify-space-around pa-1 mx-2 my-1" Elevation="2">
            Test
        </MudPaper>
    </MudItem>
    <MudItem>
        <SettingsSave />
    </MudItem>
</MudGrid>

@code {

    protected override void OnInitialized()
    {
        SettingsUI.PropertyChanged += PropertyChangeHandler;
    }

    private async void PropertyChangeHandler(object sender, EventArgs e)
    {
        await InvokeAsync(() => StateHasChanged());
    }

    public void Dispose() => SettingsUI.PropertyChanged -= PropertyChangeHandler;
}

@page "/interactableOverlay"
@using RatScanner.Scan
@using RatScanner.TarkovDev.GraphQL
@using Task = System.Threading.Tasks.Task;
@using TTask = RatScanner.TarkovDev.GraphQL.Task;
@using RatScanner.View;
@using RatScanner.FetchModels
@using Color = MudBlazor.Color
@using System.Diagnostics;
@inject MenuVM MenuVM
@inject RatScanner.VirtualScreenOffset VirtualScreenOffset
@inject SettingsVM SettingsVM;
@inject IJSRuntime JSRuntime;
@implements IDisposable

<div id="click-away-background" style="position: absolute; width: 100%; height: 100%;"
     onmousedown="if (event.target == this) DotNet.invokeMethodAsync('RatScanner', 'JSHideOverlay')"></div>
<div style="width: 100%; height: 100%;">
    <!--Disable pointer events to make clicks on layout divs passthorugh to the "click-away-background"-->
    <div style="position: relative; top: 20%; pointer-events: none;">
        <div class="d-flex align-content-center justify-center">

            <!--Enable pointer events again to make elements clickable-->
            <div style="width: 40vw; pointer-events: auto;">
                <MudPaper>
                    <MudTextField @ref="_searchTextField" T="string" Variant="Variant.Outlined"
                                  Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search"
                                  DebounceInterval="20" OnDebounceIntervalElapsed="ExecuteSearch" @bind-Value="@_searchText">
                    </MudTextField>
                </MudPaper>

                <MudStack Spacing="2" Class="py-2">
                    @for (int _i = 0; _i < _searchResults.Count(); _i++) {
                        int i = _i; // https://github.com/aspnet/Blazor.Docs/issues/371
                        SearchResult searchResult = _searchResults.ElementAt(i);
                        if (searchResult.Data is TarkovDev.GraphQL.Item item) {
                            <MudPaper Class="pa-2" Elevation="3" Style="">
                                <MudStack Row="true" Justify="Justify.SpaceBetween" Style="height: 6vh;">
                                    <!--Left side of the search result item-->
                                    <MudStack Row="true" Justify="Justify.FlexStart" Class="flex-1" Style="">
                                        <MudPaper Style="aspect-ratio : 1 / 1;" Outlined="true">
                                            <MudImage Src="@item.BaseImageLink"
                                                      Style="width: 100%; height: 100%; object-fit: contain;" />
                                        </MudPaper>

                                        <MudStack Justify="Justify.SpaceEvenly" AlignItems="AlignItems.End" Style="width: 4vw;">
                                            <MudChip OnClose="() => { }" CloseIcon="@Icons.Material.Filled.Checklist" Size="Size.Small"
                                                     Variant="Variant.Outlined" Color="@(item.GetTaskRemaining() > 0 ? Color.Success : Color.Default)">
                                                @item.GetTaskRemaining().ToShortString()
                                            </MudChip>
                                            <MudChip OnClose="() => { }" CloseIcon="@Icons.Material.Filled.House" Size="Size.Small"
                                                     Variant="Variant.Outlined" Color="@(item.GetHideoutTotalRemaining() > 0 ? Color.Success : Color.Default)">
                                                @item.GetHideoutTotalRemaining().ToShortString()
                                            </MudChip>
                                        </MudStack>

                                        <MudDivider Vertical="true" FlexItem="true" />

                                        <MudStack Justify="Justify.SpaceEvenly" AlignItems="AlignItems.Start">
                                            <MudText Class="ellipsis" Typo="Typo.h6" Style="max-width: 16vw">
                                                @item.Name
                                            </MudText>
                                            <MudText Align="Align.Center">
                                                @item.ShortName
                                                <MudIconButton Icon="@Constants.Icon.TarkovDev" Size="Size.Small" OnClick=@(() => OpenURL($"https://tarkov.dev/item/{item.Id}")) />
                                                <MudIconButton Icon="@Icons.Material.Filled.OpenInNew" Size="Size.Small" OnClick=@(() => OpenURL(item.WikiLink)) />
                                            </MudText>
                                        </MudStack>
                                    </MudStack>

                                    <!--Right side of the search result item-->
                                    <MudStack Row="true" Justify="Justify.FlexEnd">
                                        <MudStack Justify="Justify.SpaceEvenly" AlignItems="AlignItems.End" Style="width: 8vw" Spacing="0">
                                            <MudText Typo="Typo.h6">
                                                @item.Avg24HPrice.AsRubs()
                                            </MudText>
                                            <MudText>
                                                @item.GetAvg24hMarketPricePerSlot().AsRubs()
                                            </MudText>
                                        </MudStack>

                                        <MudDivider Vertical="true" FlexItem="true" />

                                        <MudStack Justify="Justify.SpaceEvenly" AlignItems="AlignItems.Center" Style="width: 3vw" Spacing="0">
                                            @{
                                                var bestTrader = item.GetBestTraderOffer();
                                                var traderImage = item.GetBestTraderOfferVendor()?.Trader?.ImageLink;
                                            }
                                            <MudAvatar Image="@traderImage"
                                                       Size="Size.Medium" Style="float: left;" Square="true" Variant="Variant.Outlined" />
                                            <MudText Typo="Typo.subtitle2" Style="float: right;">@bestTrader?.PriceRub.AsRubs()</MudText>
                                        </MudStack>
                                    </MudStack>
                                </MudStack>

                                @if (i != 0) return;

                                @if (item.Properties is ItemPropertiesAmmo ammoProp) {
                                    <MudDivider Vertical="false" DividerType="DividerType.Middle" Class="mx-0 my-2" />

                                    <MudStack Row="false">
                                        <MudTable T="Item" Items="@item.GetAmmoOfSameCaliber()" Dense="true" FixedHeader="true" Elevation="0" Striped="true" Style="max-height: 300px; overflow-y: auto;" RowStyleFunc="@((ctx, _) => ctx.Id == item.Id ? "background: #FFFF8040;" : "")">
                                            <HeaderContent>
                                                <MudTh Style="">Name</MudTh>
                                                <MudTh Style="text-align:right"><MudTableSortLabel SortBy="new Func<Item, object>(x=>x.Avg24HPrice)">Price</MudTableSortLabel></MudTh>
                                                <MudTh Style="text-align:right"><MudTableSortLabel SortBy="new Func<Item, object>(x=>(x.Properties as ItemPropertiesAmmo).Damage)">Damage</MudTableSortLabel></MudTh>
                                                <MudTh Style="text-align:right"><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Item, object>(x=>(x.Properties as ItemPropertiesAmmo).PenetrationPower)">Pen</MudTableSortLabel></MudTh>
                                                <MudTh Style="text-align:right">Frag %</MudTh>
                                                <MudTh Style="text-align:center">Armor Pen</MudTh>
                                            </HeaderContent>
                                            <RowTemplate>
                                                @if (context.Properties is not ItemPropertiesAmmo ammo) return;
                                                <MudTd Class="my-0 py-0">
                                                    <MudStack Row="true" AlignItems="AlignItems.Center">
                                                        <MudImage Src="@context.BaseImageLink" Style="width: 32px; height: 32px;" />
                                                        <MudText Style="">@context.ShortName</MudText>
                                                    </MudStack>
                                                </MudTd>
                                                <MudTd Style="text-align:right">@context.Avg24HPrice.AsRubs()</MudTd>
                                                <MudTd Style="text-align:right">@ammo.Damage</MudTd>
                                                <MudTd Style="text-align:right">@ammo.PenetrationPower</MudTd>
                                                <MudTd Style="text-align:right">@((int)((ammo.FragmentationChance ?? 0m) * 100m))%</MudTd>
                                                <MudTd Style="text-align:center">
                                                    @* Iterate over int from 0 to 6 and add mudavatar with each index *@
                                                    @for (int _i = 0; _i < 6; _i++) {
                                                        int i = _i; // https://github.com/aspnet/Blazor.Docs/issues/371
                                                        decimal value = Math.Clamp((ammo.PenetrationPower ?? 0m) / 10m - i, 0, 1);
                                                        int hue = (int)(value * 120m);
                                                        string style = $"background-color: hsl({hue},100%,40%);";
                                                        <MudAvatar Size="Size.Small" Square="true" Variant="Variant.Outlined" Style="@style">
                                                            @(i+1)
                                                        </MudAvatar>
                                                    }
                                                </MudTd>
                                            </RowTemplate>
                                        </MudTable>
                                    </MudStack>
                                }
                            </MudPaper>
                        } else if (searchResult.Data is TarkovDev.GraphQL.Task task) {
                            <MudPaper Class="pa-2" Elevation="3" Style="">
                                <MudStack Row="true" Justify="Justify.SpaceBetween" Style="height: 6vh;">
                                    <!--Left side of the search result item-->
                                    <MudStack Row="true" Justify="Justify.FlexStart" Class="flex-1;">
                                        <MudStack Justify="Justify.Center">
                                            <MudPaper Style="height: 100%;" Outlined="true">
                                                <MudImage Src="@task.TaskImageLink"
                                                          Style="height: 100%;" />
                                            </MudPaper>
                                        </MudStack>

                                        <MudStack Justify="Justify.SpaceEvenly" AlignItems="AlignItems.Start">
                                            <MudText Class="ellipsis" Typo="Typo.h6" Style="max-width: 16vw">
                                                @task.Name
                                            </MudText>
                                            <MudText Align="Align.Center">
                                                <MudIconButton Icon="@Constants.Icon.TarkovDev" Size="Size.Small" OnClick=@(() => OpenURL($"https://tarkov.dev/task/{task.Id}")) />
                                                <MudIconButton Icon="@Icons.Material.Filled.OpenInNew" Size="Size.Small" OnClick=@(() => OpenURL(task.WikiLink)) />
                                            </MudText>
                                        </MudStack>
                                    </MudStack>
                                    <!--Right side of the search result item-->
                                    <MudStack Row="true" Justify="Justify.FlexEnd">
                                        <MudStack Justify="Justify.SpaceEvenly" AlignItems="AlignItems.End" Spacing="0">
                                            <MudStack Justify="Justify.SpaceEvenly" AlignItems="AlignItems.Center" Spacing="0">
                                                <MudAvatar Image="@task.Trader?.ImageLink"
                                                           Size="Size.Large" Style="float: left;" Square="true" Variant="Variant.Outlined" />
                                            </MudStack>
                                        </MudStack>
                                    </MudStack>
                                </MudStack>

                                @if (i != 0) return;
                                <MudDivider Vertical="false" DividerType="DividerType.Middle" Class="mx-0 my-2" />

                                <MudStack Row="false" Style="max-height:200px; overflow:hidden; position:relative">
                                    <div class="fadeOut" style="top: 200px;"></div>
                                    @foreach (ITaskObjective? objective in task.Objectives ?? Enumerable.Empty<ITaskObjective?>()) {
                                        if (objective == null) continue;
                                        <MudStack Row="true" Justify="Justify.FlexStart" Class="">
                                            <MudIcon Icon="@Constants.Icon.TaskObjective.FromType(objective.Type)" />
                                            <MudText>
                                                @objective.Description
                                            </MudText>
                                        </MudStack>
                                    }
                                </MudStack>
                            </MudPaper>
                        }
                    }
                </MudStack>
            </div>
        </div>
    </div>
</div>

<style>
    .ellipsis {
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
        min-width: 0;
    }

    .mud-select-input {
        font-size: 2.00rem;
    }
</style>

@code {
    private static MudTextField<string> _searchTextField { get; set; } = null!;

    private string _searchText { get; set; } = "";

    private IEnumerable<SearchResult> _searchResults { get; set; } = new List<SearchResult>();

    private async void ExecuteSearch(string value) {
        var sanitizedValue = SanitizeSearch(value);

        var results = Enumerable.Empty<SearchResult>();
        results = results.Concat(await SearchItem(sanitizedValue));
        results = results.Concat(await SearchTasks(sanitizedValue));

        results = results.Where(result => result != null && result.Data != null);
        results = results.OrderBy(result => result.Score).Take(4);
        _searchResults = results;
    }

    private async Task<IEnumerable<SearchResult>> SearchTasks(string value) {
        if (string.IsNullOrEmpty(value)) return Enumerable.Empty<SearchResult>();

        Func<TarkovDev.GraphQL.Task, SearchResult?> filter = (task) => {
            if (SanitizeSearch(task.Name) == value) return new(task, 4);
            if (SanitizeSearch(task.Name).StartsWith(value)) return new(task, 10);

            // Match every individual word (expensive)
            string[] filters = value.Split(new[] { ' ' });
            if (filters.All(filter => SanitizeSearch(task.Name).Contains(filter))) return new(task, 30);

            if (SanitizeSearch(task.Name).Contains(value)) return new(task, 50);

            if (value.Length > 3 && SanitizeSearch(task.Id).StartsWith(value)) return new(task, 80);
            if (value.Length > 3 && SanitizeSearch(task.Id).Contains(value)) return new(task, 100);
            return null;
        };

        List<SearchResult> matches = new List<SearchResult>();
        await Task.Run(() => {
            foreach (var task in TarkovDevAPI.GetTasks()) {
                var match = filter(task);
                if (match?.Data == null) continue;
                matches.Add(match);
            }
        });

        return matches;
    }

    private async Task<IEnumerable<SearchResult>> SearchItem(string value) {
        if (string.IsNullOrEmpty(value)) return Enumerable.Empty<SearchResult>();

        Func<TarkovDev.GraphQL.Item, SearchResult?> filter = (item) => {
            if (SanitizeSearch(item.Name) == value) return new(item, 5);
            if (SanitizeSearch(item.ShortName) == value) return new(item, 10);

            if (SanitizeSearch(item.Name).StartsWith(value)) return new(item, 20);
            if (SanitizeSearch(item.ShortName).StartsWith(value)) return new(item, 20);

            // Match every individual word (expensive)
            string[] filters = value.Split(new[] { ' ' });
            if (filters.All(filter => SanitizeSearch(item.Name).Contains(filter))) return new(item, 40);
            if (filters.All(filter => SanitizeSearch(item.ShortName).Contains(filter))) return new(item, 40);

            if (SanitizeSearch(item.Name).Contains(value)) return new(item, 60);
            if (SanitizeSearch(item.ShortName).Contains(value)) return new(item, 60);

            if (value.Length > 3 && SanitizeSearch(item.Id).StartsWith(value)) return new(item, 80);
            if (value.Length > 3 && SanitizeSearch(item.Id).Contains(value)) return new(item, 100);
            return null;
        };

        List<SearchResult> matches = new List<SearchResult>();
        await Task.Run(() => {
            foreach (var item in TarkovDevAPI.GetItems()) {
                var match = filter(item);
                if (match?.Data == null) continue;
                matches.Add(match);
            }
        });

        for (int i = 0; i < matches.Count; i++) {
            // Slightly penalize items with long names
            if (!(matches[i].Data is TarkovDev.GraphQL.Item item)) continue;
            matches[i].Score += (item.Name?.Length ?? 0) * 0.002;

            // Penalize weapon mods so the weapon it self will rank higher
            if (item.Types != null && item.Types.Contains(TarkovDev.GraphQL.ItemType.Mods)) matches[i].Score += 5;
        }

        return matches;
    }

    private string SanitizeSearch(string? value) {
        if (string.IsNullOrEmpty(value)) return string.Empty;
        value = value.ToLower().Trim();
        value = value.Replace("-", " ");
        value = new string(value.Where(c => char.IsLetterOrDigit(c) || c == ' ').ToArray());
        return value;
    }

    [JSInvokable]
    public static void JSHideOverlay() {
        BlazorUI.BlazorInteractableOverlay.HideOverlay();
    }

    [JSInvokable]
    public static void JSShowOverlay() {
        _searchTextField.FocusAsync();
        _searchTextField.SelectAsync();
    }

    protected override void OnInitialized() {
        MenuVM.PropertyChanged += PropertyChangeHandler;
    }

    private async void PropertyChangeHandler(object? sender, EventArgs e) {
        await InvokeAsync(() => StateHasChanged());
    }

    public void Dispose() {
        MenuVM.PropertyChanged -= PropertyChangeHandler;
    }

    public class SearchResult {
        public SearchResult(object data, float score) {
            Score = score;
            Data = data;
        }

        public object Data;
        public double Score;
    }

    private void OpenURL(string? url) {
        if (string.IsNullOrEmpty(url)) return;
        var psi = new ProcessStartInfo {
                FileName = url,
                UseShellExecute = true,
            };
        Process.Start(psi);
    }
}
